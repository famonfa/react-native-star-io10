buildscript {
    // Buildscript is evaluated before everything else so we can't use getExtOrDefault
    def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['StarIO10Module_kotlinVersion']

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle")
        classpath("com.facebook.react:react-native-gradle-plugin")
        // noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlinx-serialization'

def getExtOrDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['StarIO10Module_' + name]
}

def getExtOrIntegerDefault(name) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['StarIO10Module_' + name]).toInteger()
}

android {
    compileSdk getExtOrIntegerDefault('compileSdkVersion')
    buildToolsVersion getExtOrDefault('buildToolsVersion')
    defaultConfig {
        minSdkVersion 29
        targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
        versionCode 1
        versionName "1.10.0"
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    lintOptions {
        disable 'GradleCompatible'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    mavenCentral()
    google()

    flatDir {
        // Multiple fallback paths for different build environments
        def starIO10Paths = [
            "$projectDir/src/lib",
            "$projectDir/libs",
            "$rootDir/libs",
            "$rootDir/../node_modules/react-native-star-io10/android/src/lib",
            "$rootDir/node_modules/react-native-star-io10/android/src/lib",
            "${project.projectDir}/src/lib"
        ]
        
        // Log the paths for debugging
        starIO10Paths.each { path ->
            def dir = new File(path)
            logger.info("StarIO10: Checking path: $path - exists: ${dir.exists()}")
            if (dir.exists()) {
                def aarFile = new File(dir, "stario10.aar")
                logger.info("StarIO10: AAR file at $path/stario10.aar - exists: ${aarFile.exists()}")
            }
        }
        
        dirs starIO10Paths
    }

    def found = false
    def defaultDir = null
    def androidSourcesName = 'React Native sources'

    if (rootProject.ext.has('reactNativeAndroidRoot')) {
        defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
    } else {
        defaultDir = new File(
                projectDir,
                '/../../../node_modules/react-native/android'
        )
    }

    if (defaultDir.exists()) {
        maven {
            url defaultDir.toString()
            name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
        found = true
    } else {
        def parentDir = rootProject.projectDir

        1.upto(5, {
            if (found) return true
            parentDir = parentDir.parentFile

            def androidSourcesDir = new File(
                    parentDir,
                    'node_modules/react-native'
            )

            def androidPrebuiltBinaryDir = new File(
                    parentDir,
                    'node_modules/react-native/android'
            )

            if (androidPrebuiltBinaryDir.exists()) {
                maven {
                    url androidPrebuiltBinaryDir.toString()
                    name androidSourcesName
                }

                logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
                found = true
            } else if (androidSourcesDir.exists()) {
                maven {
                    url androidSourcesDir.toString()
                    name androidSourcesName
                }

                logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
                found = true
            }
        })
    }

    if (!found) {
        throw new GradleException(
                "${project.name}: unable to locate React Native android sources. " +
                        "Ensure you have you installed React Native as a dependency in your project and try again."
        )
    }
}

def kotlin_version = getExtOrDefault('kotlinVersion')

// Task to ensure AAR is available for cloud builds
task ensureStarIO10Aar {
    doLast {
        def aarSrc = new File(projectDir, "src/lib/stario10.aar")
        def aarTargets = [
            new File(projectDir, "libs/stario10.aar"),
            new File(rootDir, "libs/stario10.aar")
        ]
        
        if (aarSrc.exists()) {
            aarTargets.each { target ->
                target.parentFile.mkdirs()
                if (!target.exists()) {
                    copy {
                        from aarSrc
                        into target.parentFile
                    }
                    logger.info("StarIO10: Copied AAR to ${target.absolutePath}")
                }
            }
        } else {
            logger.warn("StarIO10: Source AAR not found at ${aarSrc.absolutePath}")
        }
    }
}

// Ensure AAR is available before any build tasks
preBuild.dependsOn ensureStarIO10Aar

dependencies {
    // noinspection GradleDynamicVersion
    api 'com.facebook.react:react-native:+'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation (name: 'stario10', ext: 'aar')
    def coroutines_version = '1.6.4' // Version of the library for Kotlin coroutines (async, await)
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version" // Library for Kotlin coroutines (async, await)
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1" // kotlin 1.7.20
}
